{-
   This file was automatically generated by elm-graphql.
-}


module MembersData exposing (Members, members)

import GraphQL exposing (apply, maybeEncode)
import Http
import Json.Decode exposing (..)
import Json.Encode exposing (encode)


endpointUrl : String
endpointUrl =
    "http://localhost:8080/graphql"


type alias Members =
    { members :
        Maybe
            (List
                { id : String
                , firstName : Maybe String
                , lastName : Maybe String
                }
            )
    }


members : Http.Request Members
members =
    let
        graphQLQuery =
            """query members { members { id firstName lastName } }"""
    in
    let
        graphQLParams =
            Json.Encode.object
                []
    in
    GraphQL.query "GET" endpointUrl graphQLQuery "members" graphQLParams membersDecoder


membersDecoder : Decoder Members
membersDecoder =
    map Members
        (field "members"
            (maybe
                (list
                    (map (\id firstName lastName -> { id = id, firstName = firstName, lastName = lastName }) (field "id" string)
                        |> apply (maybe (field "firstName" string))
                        |> apply (maybe (field "lastName" string))
                    )
                )
            )
        )
