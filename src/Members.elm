{-
   This file was automatically generated by elm-graphql.
-}


module Members exposing (Members, Member, Roles, Role(..), memberDecoder, members, roleToString, stringToRole)

import GraphQL exposing (apply, maybeEncode)
import Http
import Json.Decode exposing (..)
import Json.Encode exposing (encode)


endpointUrl : String
endpointUrl =
    "http://localhost:8080/graphql"


type Role
    = FrontOfHouse
    | BarTending
    | Security
    | Floating
    | SetUp
    | Tech
    | Maintenance
    | Cleaning
    | WhateverMamaNeeds
    | Other String


type alias Roles =
    List Role


type alias Member =
    { id : String
    , firstName : String
    , lastName : String
    , email : String
    , dateOfBirth : String
    , payed : Bool
    , volunteer : Bool
    , roles : Roles
    }


type alias Members =
    List Member


stringToRole : String -> Role
stringToRole role =
    case role of
        "Front of House" ->
            FrontOfHouse

        "Bar Tending" ->
            BarTending

        "Security" ->
            Security

        "Floating" ->
            Floating

        "Set-up" ->
            SetUp

        "Tech" ->
            Tech

        "Maintenance" ->
            Maintenance

        "Cleaning" ->
            Cleaning

        "Whatever Mama needs" ->
            WhateverMamaNeeds

        _ ->
            Other role


roleToString : Role -> String
roleToString role =
    case role of
        FrontOfHouse ->
            "Front Of House"

        BarTending ->
            "Bar Tending"

        Security ->
            "Security"

        Floating ->
            "Floating"

        SetUp ->
            "Set-up"

        Tech ->
            "Tech"

        Maintenance ->
            "Maintenance"

        Cleaning ->
            "Cleaning"

        WhateverMamaNeeds ->
            "Whatever Mama Needs"

        Other other ->
            other


members : Http.Request Members
members =
    let
        graphQLQuery =
            """query members { members { id firstName lastName email dateOfBirth payed volunteer roles } }"""
    in
        let
            graphQLParams =
                Json.Encode.object
                    []
        in
            GraphQL.query "GET" endpointUrl graphQLQuery "members" graphQLParams membersDecoder


rolesDecoder : Decoder Roles
rolesDecoder =
    list string |> map (List.map stringToRole)


memberDecoder : Decoder Member
memberDecoder =
    map8 Member
        (field "id" string)
        (field "firstName" string)
        (field "lastName" string)
        (field "email" string)
        (field "dateOfBirth" string)
        (field "payed" bool)
        (field "volunteer" bool)
        (field "roles" rolesDecoder)


membersDecoder : Decoder Members
membersDecoder =
    at [ "data", "members" ] (list memberDecoder)
