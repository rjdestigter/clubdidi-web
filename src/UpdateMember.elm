{-
   This file was automatically generated by elm-graphql.
-}


module UpdateMember exposing (UpdateMember, updateMember)

import GraphQL exposing (apply, maybeEncode)
import Http
import Json.Decode exposing (..)
import Json.Encode exposing (encode)


endpointUrl : String
endpointUrl =
    "http://localhost:8080/graphql"


type alias UpdateMember =
    { updateMember :
        Maybe
            { member :
                Maybe
                    { id : String
                    , firstName : Maybe String
                    , lastName : Maybe String
                    , email : Maybe String
                    , dateOfBirth : Maybe String
                    , payed : Maybe Bool
                    , volunteer : Maybe Bool
                    }
            }
    }


updateMember :
    { input :
        { id : Maybe String
        , firstName : Maybe String
        , lastName : Maybe String
        , email : Maybe String
        , volunteer : Maybe Bool
        , dateOfBirth : Maybe String
        , payed : Maybe String
        , clientMutationId : Maybe String
        }
    }
    -> Http.Request UpdateMember
updateMember params =
    let
        graphQLQuery =
            """mutation UpdateMember($input: UpdateMemberInput!) { updateMember(input: $input) { member { id firstName lastName email dateOfBirth payed volunteer } } }"""
    in
    let
        graphQLParams =
            Json.Encode.object
                [ ( "input", Json.Encode.object [ ( "id", maybeEncode Json.Encode.string params.input.id ), ( "firstName", maybeEncode Json.Encode.string params.input.firstName ), ( "lastName", maybeEncode Json.Encode.string params.input.lastName ), ( "email", maybeEncode Json.Encode.string params.input.email ), ( "volunteer", maybeEncode Json.Encode.bool params.input.volunteer ), ( "dateOfBirth", maybeEncode Json.Encode.string params.input.dateOfBirth ), ( "payed", maybeEncode Json.Encode.string params.input.payed ), ( "clientMutationId", maybeEncode Json.Encode.string params.input.clientMutationId ) ] )
                ]
    in
    GraphQL.mutation endpointUrl graphQLQuery "UpdateMember" graphQLParams updateMemberDecoder


updateMemberDecoder : Decoder UpdateMember
updateMemberDecoder =
    map UpdateMember
        (field "updateMember"
            (maybe
                (map (\member -> { member = member })
                    (field "member"
                        (maybe
                            (map (\id firstName lastName email dateOfBirth payed volunteer -> { id = id, firstName = firstName, lastName = lastName, email = email, dateOfBirth = dateOfBirth, payed = payed, volunteer = volunteer }) (field "id" string)
                                |> apply (maybe (field "firstName" string))
                                |> apply (maybe (field "lastName" string))
                                |> apply (maybe (field "email" string))
                                |> apply (maybe (field "dateOfBirth" string))
                                |> apply (maybe (field "payed" bool))
                                |> apply (maybe (field "volunteer" bool))
                            )
                        )
                    )
                )
            )
        )
